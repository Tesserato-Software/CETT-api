name: Frontend CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      PORT: ${{ secrets.PORT }}
      HOST: ${{ secrets.HOST }}
      NODE_ENV: ${{ secrets.NODE_ENV }}
      APP_KEY: ${{ secrets.APP_KEY }}
      DRIVE_DISK: ${{ secrets.DRIVE_DISK }}
      DB_CONNECTION: ${{ secrets.DB_CONNECTION }}
      PG_HOST: ${{ secrets.PG_HOST }}
      PG_PORT: ${{ secrets.PG_PORT }}
      PG_USER: ${{ secrets.PG_USER }}
      PG_PASSWORD: ${{ secrets.PG_PASSWORD }}
      PG_DB_NAME: ${{ secrets.PG_DB_NAME }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"

    - name: Cache node modules
      id: cache-yarn
      uses: actions/cache@v3
      env:
        cache-name: cache-node-modules
      with:
        path: $ {{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-build-${{ env.cache-name }}\
          -${{ hashFiles('**/yarn.lock') }}
        restore-keys:
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - if: ${{ steps.cache-yarn.outputs.cache-hit != 'true' }}
      name: List the state of node modules
      continue-on-error: true
      run: yarn list

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18

    - name: Install Dependencies
      run: yarn install

    - name: Build
      run: yarn build

    - name: Install production dependencies
      run: cd build && yarn install --production && cd ..

    - name: Deploy to VPS
      uses: easingthemes/ssh-deploy@main
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        ARGS: "-rlgoDzvc -i --delete"
        SOURCE: "build/"
        REMOTE_HOST: ${{ secrets.SSH_HOST }}
        REMOTE_USER: ${{ secrets.SSH_USERNAME }}
        TARGET: ${{ secrets.REMOTE_TARGET }}